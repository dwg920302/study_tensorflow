from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten

model = Sequential() # (N, 10, 10, 1)
model.add(Conv2D(10, kernel_size=(2, 2), input_shape=(12, 12, 1))) # (N, 9, 9, 10)
model.add(Conv2D(20, (2, 2), activation='relu')) # (N, 8, 8, 20)
model.add(Conv2D(30, (2, 2), activation='relu')) # (N, 7, 7, 30)
model.add(Conv2D(40, (2, 2), activation='relu')) # (N, 6, 6, 40)
model.add(Conv2D(50, (2, 2), activation='relu')) # (N, 5, 5, 50)

model.add(Flatten())
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.summary()
'''
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 4, 4, 10)          50 (40 + 10) -> 40 = (2 * 2 * 1 * 10)
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 3, 3, 20)          820 (800 + 20) -> 800 = (2 * 2 * 10 * 20)
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 2, 2, 30)          2430 (2400 + 30) -> 2400 = (2 * 2 * 20 * 30)
_________________________________________________________________


_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 9, 9, 10)          50 (40 + 10) -> 40 = (2 * 2 * 1 * 10)
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 8, 8, 20)          820 (800 + 20) -> 800 = (2 * 2 * 10 * 20)
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 7, 7, 30)          2430 (2400 + 30) -> 2400 = (2 * 2 * 20 * 30)
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 6, 6, 40)          4840 (4800 + 40) -> 4800 = (2 * 2 * 30 * 40)
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 5, 5, 50)          8050 (8000 + 50) -> 8000 = 50 * ((2 * 2 * 40) + 1)
_________________________________________________________________

_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 4, 4, 20)          100 (80 + 20) -> 80 = (2 * 2 * 1 * 20)
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 3, 3, 40)          3240 (3200 + 40) -> 3200 = (2 * 2 * 20 * 40)
_________________________________________________________________ 
conv2d_2 (Conv2D)            (None, 2, 2, 60)          9660 (9600 + 60) -> 9600 = (2 * 2 * 40 * 60)
_________________________________________________________________

kernel (3, 3)
Layer (type)                 Output Shape              Param #
=================================================================
conv2d (Conv2D)              (None, 3, 3, 10)          100
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 1, 1, 20)          1820
_________________________________________________________________

-> 일반 Dense처럼 Bias 1이 그대로 들어가는 건 동일함.

-> input_shape는 parameter와 1도 관계 없음

number_parameters = output_channels * (input_channels * kernel_height * kernel_width + 1)  # 1 for bias




in_channels = 3
out_channels = 32
kernel_h = kernel_w = 3
number_parameters = 32(3*3*3 + 1) = 896

'''